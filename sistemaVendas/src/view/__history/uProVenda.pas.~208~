unit uProVenda;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uTelaHeranca, Data.DB, System.Actions,
  Vcl.ActnList, System.ImageList, Vcl.ImgList, Vcl.Grids, Vcl.DBGrids,
  Vcl.StdCtrls, Vcl.Mask, Vcl.ComCtrls, Vcl.Buttons, Vcl.DBCtrls, Vcl.ExtCtrls,
  Data.Win.ADODB, uDM, uDMVendas, RxToolEdit, RxCurrEdit;

type
  TfProVenda = class(TfTelaHeranca)
    adoLista: TADOQuery;
    dtListagem: TDataSource;
    StatusBar1: TStatusBar;
    edtVendasId: TLabeledEdit;
    lkCliente: TDBLookupComboBox;
    Categoria: TLabel;
    edtDataVenda: TDateEdit;
    Label2: TLabel;
    pnlFundo: TPanel;
    pnltopo: TPanel;
    pnlBaixo: TPanel;
    lblValor: TLabel;
    edtValorTotal: TCurrencyEdit;
    lkpProduto: TDBLookupComboBox;
    Label1: TLabel;
    edtValorUnitario: TCurrencyEdit;
    edtQuantidade: TCurrencyEdit;
    edtTotalProduto: TCurrencyEdit;
    lblValorUnitario: TLabel;
    lblQuantidade: TLabel;
    lblTotalProduto: TLabel;
    btnAdicionar: TBitBtn;
    btnRemover: TBitBtn;
    dbgListagem1: TDBGrid;
    procedure FormShow(Sender: TObject);
    procedure dbgListagemTitleClick(Column: TColumn);
    procedure btnPesquisarClick(Sender: TObject);
    procedure edtPesquisarKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure btnApagarClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure btnGravarClick(Sender: TObject);
    procedure btnNovoClick(Sender: TObject);
    procedure btnAdicionarClick(Sender: TObject);
    procedure lkpProdutoExit(Sender: TObject);
    procedure edtQuantidadeExit(Sender: TObject);
    procedure edtQuantidadeEnter(Sender: TObject);
  private
    procedure pegaDados;
    procedure ExibirLabelIndice(Campo: String; aLabel: TLabel);
    procedure LimparComponenteItem;
    function RetornaCampoTraduzido(Campo: String): String;
    function TotalizarProduto(valorUnitario, Quantidade: Double): Double;
    var i : string;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  fProVenda: TfProVenda;

implementation

{$R *.dfm}

{ TfProVenda }
procedure TfProVenda.FormShow(Sender: TObject);
begin
  lblIndice.Caption:= 'Nome';
  pegaDados;
  inherited;
end;


// Ao selecionar o produto na aba manutenção, ele trás o valor unitário do produto no campo edt
procedure TfProVenda.lkpProdutoExit(Sender: TObject);
begin
  inherited;
  edtValorUnitario.Value := DMsvendas.quProdutos.FieldByName('valor').AsFloat;
  edtQuantidade.Value := 1;
  edtTotalProduto.Value := TotalizarProduto(edtValorUnitario.Value, edtQuantidade.Value);
end;

// Após a inserção da quantidade, automaticamente ele trará o valor total do produto no edt
procedure TfProVenda.edtQuantidadeExit(Sender: TObject);
begin
  inherited;
  edtTotalProduto.Value := TotalizarProduto(edtValorUnitario.Value, edtQuantidade.value);
end;

procedure TfProVenda.edtQuantidadeEnter(Sender: TObject);
begin
  inherited;
  edtTotalProduto.Value := TotalizarProduto(edtValorUnitario.Value, edtQuantidade.value);
end;

//Parte responsável por configuração da grid
{$region 'Configurações da grid - resposável por ordenar e realizar a consulta por id ou nome e atualizar'}

procedure TfProVenda.btnPesquisarClick(Sender: TObject);
begin
  inherited;
  pegaDados;
end;

procedure TfProVenda.dbgListagemTitleClick(Column: TColumn);
begin
  inherited;
  //IndiceAtual := Column.Field.FieldName;

  // Verifica se o campo é válido
  if not Assigned(Column.Field) then Exit;

  // Alterna entre ASC e DESC
  if SameText(Trim(adoLista.Sort), Column.Field.FieldName + ' ASC') then
    adoLista.Sort := Column.Field.FieldName + ' DESC'
  else
    adoLista.Sort := Column.Field.FieldName + ' ASC';

  // lblIndice.Caption := RetornaCampoTraduzido(Column.Field.FieldName);  trocou pela de baixo
  ExibirLabelIndice(Column.Field.FieldName, lblIndice);
end;

procedure TfProVenda.ExibirLabelIndice(Campo: String; aLabel: TLabel);
begin
  aLabel.Caption := RetornaCampoTraduzido(Campo);
end;

// Responsável por verificar a coluna que eu cliquei para que o lbl fique com o mesmo titulo
function TfProVenda.RetornaCampoTraduzido(Campo: String): String;
var
 i : integer;
begin
   for I := 0 to adoLista.Fields.Count -1 do
  begin
    if adoLista.Fields[i].FieldName = campo then
    begin
      Result := adoLista.Fields[i].DisplayLabel;
      break;
    end;

  end;
end;

// Evento do campo digite sua pesquisa, depois de fazer a consulta e depois de tirar alguma informação do campo, a grid volta a aparecer todos os registros
procedure TfProVenda.edtPesquisarKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  inherited;
  pegaDados;
end;

{$endregion}


//Parte responsável adicionar um novo item, excluir ou alterar
{$region 'Parte de inserir, alterar e excluir o item da grid da aba listagem'}
// informando que ao clicar em novo, a variável i recebe 'novo' - necessário para utilizar no botão salvar
procedure TfProVenda.btnNovoClick(Sender: TObject);
begin
  i := 'novo';
  inherited;
end;

// responsável por trazer os dados que já estão na grid, para realizar a alteração
procedure TfProVenda.btnAdicionarClick(Sender: TObject);
begin
  inherited;
  if lkpProduto.KeyValue = null then
  begin
    MessageDlg('Campo do produto é um campo obrigatório', TMsgDlgType.mtInformation, [TMsgDlgBtn.mbOK], 0 );
    lkpProduto.SetFocus;
    abort;
  end;

  if edtValorUnitario.Value <= 0  then
  begin
    MessageDlg('Valor unitário é um campo que não pode ser zero', TMsgDlgType.mtInformation, [TMsgDlgBtn.mbOK], 0 );
    edtValorUnitario.SetFocus;
    abort;
  end;

  if edtQuantidade.Value <=0  then
  begin
    MessageDlg('Quantidade não pode ser zero', TMsgDlgType.mtInformation, [TMsgDlgBtn.mbOK], 0);
    edtQuantidade.SetFocus;
    abort;
  end;


  if DMsvendas.cdsItensVendas.Locate('produtoId', lkpProduto.KeyValue, [loPartialKey]) then
  begin
    MessageDlg('Esse produto já foi selecionado', TMsgDlgType.mtInformation, [TMsgDlgBtn.mbOK], 0);
    lkpProduto.SetFocus;
    abort;
  end;

  // etpa para preencher a grid manutenção, para inserir os itens na tabela
  edtTotalProduto.Value := TotalizarProduto(edtValorUnitario.Value, edtQuantidade.Value);

  DMsvendas.cdsItensVendas.Append;
    DMsvendas.cdsItensVendas.FieldByName('produtoId').AsInteger := lkpProduto.KeyValue;
    DMsvendas.cdsItensVendas.FieldByName('nomeProduto').AsString := DMsvendas.quProdutos.FieldByName('nome').AsString;
    DMsvendas.cdsItensVendas.FieldByName('quantidade').AsFloat := edtQuantidade.Value;
    DMsvendas.cdsItensVendas.FieldByName('valorUnitario').AsFloat := edtValorUnitario.Value;
    DMsvendas.cdsItensVendas.FieldByName('valorTotalProduto').AsFloat := edtTotalProduto.value;
  DMsvendas.cdsItensVendas.Post;
  while not  DMsvendas.cdsItensVendas eof do

  LimparComponenteItem;
  lkpProduto.SetFocus;

end;

//Limpar campos da aba manutenção
procedure TfProVenda.LimparComponenteItem;
begin
  lkpProduto.KeyValue := null;
  edtQuantidade.Value := 0;
  edtValorUnitario.value := 0;
  edtTotalProduto.value := 0;
end;

// Função responsável por realizar a soma e trazer esse resultado para o campo Total do produto
function TfProVenda.TotalizarProduto(valorUnitario, Quantidade: Double): Double;
begin
  Result := valorUnitario * Quantidade;
end;


procedure TfProVenda.btnAlterarClick(Sender: TObject);
begin
  i := 'alterar';

  if adoLista.IsEmpty then
  raise Exception.Create('lista vazia');

  edtVendasId.Text := adoLista.FieldByName('id').AsString;
  lkCliente.KeyValue := adoLista.FieldByName('clienteId').AsString;
  edtDataVenda.Text := adoLista.FieldByName('dataVenda').AsString;
  edtValorTotal.Text := adoLista.FieldByName('totalVenda').AsString;
  inherited;
end;

// bloco responsável por apagar dados da grid
procedure TfProVenda.btnApagarClick(Sender: TObject);
begin

  if Application.MessageBox(PChar('Deseja excluir o item '+#13+#13+ 'ID: ' + adoLista.FieldByName('id').AsString + #13 + 'nome: ' + adoLista.FieldByName('Nome').AsString + '?'), 'Atenção', MB_YESNO or MB_ICONQUESTION) = mrNo then
  abort;

  try
    // apagar os itens primeiro da tabela vendasItens
    with DM.QU do
    begin
      close;
      sql.Text := 'DELETE FROM vendasItens where id = ' + adoLista.FieldByName('id').AsString;
      ExecSQL;
    end;

    try
      with DM.QU do
      begin
        close;
        sql.Text := 'delete from vendas where id = ' + adoLista.FieldByName('id').AsString;
        ExecSQL;
      end;
    except

    end;

  finally

  end;

   pegaDados;
   inherited;
end;


// responsável por alterar ou adicionar um novo item
procedure TfProVenda.btnGravarClick(Sender: TObject);
begin

  if lkCliente.Text = '' then
    raise Exception.Create('Campo do cliente é obrigatório');


  if edtDataVenda.Text = '' then
    raise Exception.Create('Campo data venda é obrigatório');

  if edtValorTotal.Text = '' then
    raise Exception.Create('Campo total da venda é obrigatório');

  if i = 'alterar' then
  begin
    with DM.QU do
    begin
      close;
      sql.Text := 'update vendas set clienteId = ' + IntToStr(lkCliente.KeyValue) + ', dataVenda = ' + QuotedStr(edtDataVenda.Text) + ', totalVenda = ' + StringReplace(StringReplace(edtValorTotal.Text, '.', '', [rfReplaceAll]), ',', '.', [rfReplaceAll]) + ' where id = ' + edtVendasId.Text;
      //ShowMessage(sql.Text);
      ExecSQL;
    end;
  end
  else
  begin
    with DM.QU do
    begin
      close;
      SQL.Text := 'insert into vendas (clienteId, dataVenda, totalVenda) values ( ' +IntToStr(lkCliente.KeyValue) + ',' + QuotedStr(edtDataVenda.Text) + ',' + FloatToStr(StrToFloat(StringReplace(StringReplace(edtValorTotal.Text, ',', '', [rfReplaceAll]), ',', '.', [rfReplaceAll]))) + ')';
      ExecSQL;
    end;
  end;

  inherited;
  pegaDados;
end;


{$endregion}

//Pega dados
{$region 'Configurações da grid - resposável por trazer dados a grid, pra pesquisar, alinhar'}
procedure TfProVenda.pegaDados;
var
  filtro: string;
  I: integer;
  ganhos : real;
begin
  filtro := '';
  ganhos := 0;

  if lblIndice.Caption = 'ID'  then
  begin
    if edtPesquisar.Text <> '' then
    filtro := ' where vendas.id = ' + QuotedStr(edtPesquisar.Text);
  end
  else if lblIndice.Caption = 'ID Cliente' then
  begin
    if edtPesquisar.Text <> '' then
    filtro := ' where vendas.clienteId = ' + QuotedStr(edtPesquisar.Text);
  end
  else if lblIndice.Caption = 'Nome' then
  begin
    if edtPesquisar.Text <> '' then
    filtro := ' where clientes.nome like ' + QuotedStr('%' + edtPesquisar.Text + '%');
  end
  else if lblIndice.Caption = 'Data da Venda'  then
  begin
    if edtPesquisar.Text <> '' then
    filtro := ' where vendas.dataVenda like ' + QuotedStr('%' +edtPesquisar.Text+'%')
  end
  else if lblIndice.Caption = 'Total de vendas' then
  begin
    if edtPesquisar.Text <> '' then
    filtro := ' where vendas.totalVenda = ' + QuotedStr(edtPesquisar.Text);
  end;

  with adoLista do
  begin
    close;
    sql.Text := 'select ' +
                'vendas.id, '+
                'vendas.clienteId, '+
                'clientes.nome, '+
                'vendas.dataVenda, '+
                'vendas.totalVenda ' +
                'from vendas ' +
                'inner join clientes '+
                'on clientes.id = vendas.clienteId ' + filtro;
   open;
   FieldByName('id').DisplayLabel := 'ID';
   FieldByName('id').DisplayWidth := 5;
   FieldByName('clienteId').DisplayLabel := 'ID Cliente';
   FieldByName('clienteId').DisplayWidth := 10;
   FieldByName('nome').DisplayLabel := 'Nome';
   FieldByName('nome').DisplayWidth := 40;
   FieldByName('dataVenda').DisplayLabel := 'Data da Venda';
   FieldByName('dataVenda').DisplayWidth := 15;
   FieldByName('totalVenda').DisplayLabel := 'Total de vendas';
   FieldByName('totalVenda').DisplayWidth := 20;

   for I := 0 to dbgListagem.Columns.Count -1 do
   begin
     dbgListagem.Columns[i].Alignment := taCenter;
     dbgListagem.Columns[i].Title.Alignment := taCenter;
   end;

   while not eof do
   begin
     ganhos := ganhos + FieldByName('totalVenda').AsFloat;
     next;
   end;

   StatusBar1.Panels[1].Text := 'R$ ' + FormatFloat('#.##', ganhos);
  end;

end;

{$endregion}

end.

unit uCadCategoria;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uTelaHeranca, Data.DB, Data.Win.ADODB,
  System.Actions, Vcl.ActnList, System.ImageList, Vcl.ImgList, Vcl.Grids,
  Vcl.DBGrids, Vcl.StdCtrls, Vcl.Mask, Vcl.ComCtrls, Vcl.Buttons, Vcl.DBCtrls,
  Vcl.ExtCtrls, uEnum, cCadCategoria;

type
  TfCadCategoria = class(TfTelaHeranca)
    adoCategoria: TADOQuery;
    DataSource1: TDataSource;
    StatusBar1: TStatusBar;
    procedure FormShow(Sender: TObject);
    //procedure dbgListagemDblClick(Sender: TObject);
    procedure dbgListagemTitleClick(Column: TColumn);
    procedure btnPesquisarClick(Sender: TObject);
    procedure edtPesquisarKeyUp(Sender: TObject; var Key: Word;
      Shift: TShiftState);
    procedure btnGravarClick(Sender: TObject);
    procedure FormCreate(Sender: TObject);
    procedure FormClose(Sender: TObject; var Action: TCloseAction);
    procedure btnApagarClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure btnNovoClick(Sender: TObject);


  private
    oCategoria:TCategoria;  // OBJETO DEVE ESTAR PRIMEIRO QUE AS PROCEDURES SE NÃO DA ERRO
    procedure pegaDados;
    function Excluir:Boolean; override;
    function Grava(EstadoDoCadastro:TEstadoDoCadastro):Boolean; override;
    procedure ExibirLabelIndice(Campo: String; aLabel: TLabel);
    function RetornaCampoTraduzido(Campo: String): String;
    var i : string;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  fCadCategoria: TfCadCategoria;

implementation

{$R *.dfm}

uses uDM;

{ TfCadCategoria }

// Ordenar as colunas do dbGrid
procedure TfCadCategoria.btnAlterarClick(Sender: TObject);
begin
  i := 'alterar';

  if adoCategoria.IsEmpty then
  raise Exception.Create('Lista Vázia');

  edtCategoria.Text := adoCategoria.FieldByName('id').AsString;
  edtDescricao.Text := adoCategoria.FieldByName('descricao').AsString;

  inherited;

end;


procedure TfCadCategoria.btnApagarClick(Sender: TObject);
begin

  //Verificar se o usuário realmente quer excluir o item selecionado
  if Application.MessageBox(PChar('Deseja excluir o item '+#13+#13+ 'ID: ' + adoCategoria.FieldByName('id').AsString + #13 + 'Descrição: ' + adoCategoria.FieldByName('descricao').AsString + '?'), 'Atenção', MB_YESNO or MB_ICONQUESTION ) =  mrNo then
    abort;

  //fazer exclusão do item
  with dm.QU do
  begin
    close;
    sql.text := 'delete from categoria where id = ' + adoCategoria.FieldByName('id').AsString;
    ExecSQL;
  end;

  inherited;
  adoCategoria.Refresh;
end;

procedure TfCadCategoria.btnGravarClick(Sender: TObject);
begin
  ShowMessage(i);
   if i = 'novo' then
  begin
    with DM.QU do
    begin
      close;
      sql.Text := 'insert into categoria (descricao) values ('+edtDescricao.Text+')';
      ExecSQL;
    end;
  end
  else if i = 'alterar' then
  begin
    //fazer update
    with dm.Qu do
    begin
      close;
      sql.text := 'update categoria set descricao = '+QuotedStr(edtDescricao.Text)+
      ' WHERE id = '+edtCategoria.Text;
      ExecSQL;
    end;
    //---------
  end;

  //inherited;
  pegaDados;

end;

procedure TfCadCategoria.btnNovoClick(Sender: TObject);
begin
  inherited;
  i := 'novo';
  edtDescricao.Text := '';
end;

procedure TfCadCategoria.btnPesquisarClick(Sender: TObject);
begin
  inherited;
  pegaDados;
end;

procedure TfCadCategoria.dbgListagemTitleClick(Column: TColumn);
begin
  inherited;
  //IndiceAtual := Column.Field.FieldName;

  // Verifica se o campo é válido
  if not Assigned(Column.Field) then Exit;

  // Alterna entre ASC e DESC
  if SameText(Trim(adoCategoria.Sort), Column.Field.FieldName + ' ASC') then
    adoCategoria.Sort := Column.Field.FieldName + ' DESC'
  else
    adoCategoria.Sort := Column.Field.FieldName + ' ASC';

  // lblIndice.Caption := RetornaCampoTraduzido(Column.Field.FieldName);  trocou pela de baixo
  ExibirLabelIndice(Column.Field.FieldName, lblIndice);

end;

// Evento do campo digite sua pesquisa, depois de fazer a consulta e depois de tirar alguma informação do campo, a grid volta a aparecer todos os registros
procedure TfCadCategoria.edtPesquisarKeyUp(Sender: TObject; var Key: Word;
  Shift: TShiftState);
begin
  inherited;
  pegadados;
end;

{$region 'Override'}

function TfCadCategoria.Excluir: Boolean;
begin
  Result := oCategoria.Apagar;
end;

function TfCadCategoria.Grava(EstadoDoCadastro: TEstadoDoCadastro): Boolean;
begin
  if edtCategoria.Text <> '' then
    oCategoria.codigo := StrToInt(edtCategoria.Text)
  else
    oCategoria.codigo := 0;

  oCategoria.descricao := edtDescricao.text;

  if (EstadoDoCadastro = ecInserir) then
    Result := oCategoria.inserir
  else if (EstadoDoCadastro = ecAlterar) then
    Result := oCategoria.Atualizar;
end;

{$endregion}

procedure TfCadCategoria.ExibirLabelIndice(Campo: String; aLabel: TLabel);
begin
  aLabel.Caption := RetornaCampoTraduzido(Campo);
end;

procedure TfCadCategoria.FormClose(Sender: TObject; var Action: TCloseAction);
begin
  inherited;
  if Assigned(oCategoria) then   // verifica antes se foi realmente criado
    FreeAndNil(oCategoria);     // destroí o objeto depois se encontrar
end;

procedure TfCadCategoria.FormCreate(Sender: TObject);
begin
  inherited;
  oCategoria := TCategoria.Create;
end;

procedure TfCadCategoria.FormShow(Sender: TObject);
begin
  inherited;
  pegaDados;
  lblIndice.Caption := 'Descrição';
end;

procedure TfCadCategoria.pegaDados;
var
  filtro: string;
  I: integer;
  totalEquipamentos: integer;
begin
  filtro := '';

 if lblIndice.Caption = 'Descrição' then
 begin
  if edtPesquisar.Text <> '' then
    filtro := 'where descricao like ' + QuotedStr('%' + edtPesquisar.Text + '%');
 end
 else
 begin
  if edtPesquisar.Text <> '' then
    filtro := 'where id = ' + QuotedStr(edtPesquisar.Text);
 end;


  with adoCategoria do
  begin
    close;
    sql.Text := 'select * from categoria ' + filtro;
    open;

    FieldByName('id').DisplayLabel := 'ID';
    FieldByName('id').DisplayWidth := 5;
    FieldByName('descricao').DisplayLabel := 'Descrição';
    FieldByName('descricao').DisplayWidth := 30;
    for I := 0 to dbgListagem.Columns.Count -1  do
    begin
      dbgListagem.Columns[I].Alignment := taCenter;
      dbgListagem.Columns[I].Title.Alignment := taCenter;
    end;

    //trazer o total de equipamentos
    StatusBar1.Panels[1].Text := IntToStr(adoCategoria.RecordCount);

  end;
end;

// Responsável por verificar a coluna que eu cliquei para que o lbl fique com o mesmo titulo
function TfCadCategoria.RetornaCampoTraduzido(Campo: String): String;
Var
  I : integer;
begin
  for I := 0 to adoCategoria.Fields.Count -1 do
  begin
    if adoCategoria.Fields[i].FieldName = campo then
    begin
      Result := adoCategoria.Fields[i].DisplayLabel;
      break;
    end;

  end;

end;

end.

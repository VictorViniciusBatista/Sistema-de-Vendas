unit uCadProduto;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, uTelaHeranca, Data.DB, System.Actions,
  Vcl.ActnList, System.ImageList, Vcl.ImgList, Vcl.Grids, Vcl.DBGrids,
  Vcl.StdCtrls, Vcl.Mask, Vcl.ComCtrls, Vcl.Buttons, Vcl.DBCtrls, Vcl.ExtCtrls,
  Data.Win.ADODB, RxToolEdit, RxCurrEdit;

type
  TfcadProduto = class(TfTelaHeranca)
    adoCadProduto: TADOQuery;
    dtProduto: TDataSource;
    StatusBar1: TStatusBar;
    edtProdutoID: TLabeledEdit;
    edtNome: TLabeledEdit;
    edtDescricao: TMemo;
    lblDescricao: TLabel;
    edtValor: TCurrencyEdit;
    edtQuantidade: TCurrencyEdit;
    lblValor: TLabel;
    lblQuantidade: TLabel;
    lkCategoria: TDBLookupComboBox;
    adoCategoria: TADOQuery;
    dtCategoria: TDataSource;
    adoCategoriaid: TAutoIncField;
    adoCategoriadescricao: TStringField;
    Categoria: TLabel;
    procedure FormShow(Sender: TObject);
    procedure dbgListagemTitleClick(Column: TColumn);
    procedure btnPesquisarClick(Sender: TObject);
    procedure btnApagarClick(Sender: TObject);
    procedure btnNovoClick(Sender: TObject);
    procedure btnAlterarClick(Sender: TObject);
    procedure btnGravarClick(Sender: TObject);
  private
  procedure pegaDados;
  procedure ExibirLabelIndice(Campo: String; aLabel: TLabel);
  function RetornaCampoTraduzido(Campo: String): String;
  var i : string;
    { Private declarations }
  public
    { Public declarations }
  end;

var
  fcadProduto: TfcadProduto;

implementation

{$R *.dfm}

uses uDM;

{ TfcadProduto }

// Responsável por ordenar de forma alfabética as colunas, de forma crescente ou decrescente
procedure TfcadProduto.btnAlterarClick(Sender: TObject);
begin
  i := 'alterar';

  if adoCadProduto.IsEmpty then
  raise Exception.Create('Lista Vázia');

  //trazer as informações que estão no banco de dados para visualização já do cadastro
  edtProdutoID.Text := adoCadProduto.FieldByName('id').AsString;
  edtNome.Text := adoCadProduto.FieldByName('nome').AsString;
  edtDescricao.Text := adoCadProduto.FieldByName('descricao').AsString;
  edtValor.Text := adoCadProduto.FieldByName('valor').AsString;
  edtQuantidade.Text := adoCadProduto.FieldByName('quantidade').AsString;
  lkCategoria.KeyValue := adoCadProduto.FieldByName('idCategoria').AsString;
  inherited;
end;

procedure TfcadProduto.btnApagarClick(Sender: TObject);
begin

  if Application.MessageBox(PChar('Deseja excluir o item '+#13+#13+ 'ID: ' + adoCadProduto.FieldByName('id').AsString + #13 + 'Nome: ' + adoCadProduto.FieldByName('nome').AsString + '?'), 'Atenção', MB_YESNO or MB_ICONQUESTION ) =  mrNo then
  abort;

  with DM.QU do
  begin
    close;
    sql.Text := 'delete from produtos where id = ' + adoCadProduto.FieldByName('id').AsString;
    ExecSQL;
  end;
  inherited;
  adoCadProduto.Refresh;
end;

procedure TfcadProduto.btnGravarClick(Sender: TObject);
begin
  if edtNome.Text = '' then
  raise Exception.Create('Campo nome é obrigatório');

  if edtDescricao.Text = '' then
  raise Exception.Create('Campo descrição é obrigatório');

  if edtValor.Text = '' then
  raise Exception.Create('Campo valor é obrigatório');

  if edtQuantidade.Text = '' then
  raise Exception.Create('Campo quantidade é obrigatório');

  if lkCategoria.Text = ''  then
  raise Exception.Create('selecionar uma categoria');

  if i = 'alterar'  then
  begin
    with DM.QU do
    begin
      close;
      sql.Text := 'update produtos set ' +
                   'nome = ' + QuotedStr(edtNome.Text)+
                   ', descricao = ' + QuotedStr(edtDescricao.Text)+
                   ', valor = ' + StringReplace(edtValor.Text, ',', '.', [rfReplaceAll])+
                   ', quantidade = ' + QuotedStr(edtQuantidade.Text)+
                   ', idCategoria = ' + IntToStr(lkCategoria.KeyValue) +
                   ' where id = ' + edtProdutoID.Text;
      ExecSQL;
    end;
  end
  else
  begin
    with DM.QU do
    begin
      close;
      sql.Text := 'insert into produtos (nome, descricao, valor, quantidade, idCategoria) values ('+QuotedStr(edtNome.Text) + ',' +
                   QuotedStr(edtDescricao.text) + ',' +
                   StringReplace(edtValor.Text, ',', '.', [rfReplaceAll]) + ',' +
                   QuotedStr(edtQuantidade.Text) + ',' +
                   IntToStr(lkCategoria.KeyValue) + ')';
      ExecSQL;
    end;
  end;

  inherited;
  pegaDados;
end;

procedure TfcadProduto.btnNovoClick(Sender: TObject);
begin
  inherited;
  i := 'novo';
  edtNome.Text := '';
end;

procedure TfcadProduto.btnPesquisarClick(Sender: TObject);
begin
  inherited;
  pegaDados;
end;

procedure TfcadProduto.dbgListagemTitleClick(Column: TColumn);
begin
  inherited;

    // Verifica se o campo é válido
  if not Assigned(Column.Field) then Exit;

  // Alterna entre ASC e DESC
  if SameText(Trim(adoCadProduto.Sort), Column.Field.FieldName + ' ASC') then
    adoCadProduto.Sort := Column.Field.FieldName + ' DESC'
  else
    adoCadProduto.Sort := Column.Field.FieldName + ' ASC';

  ExibirLabelIndice(Column.Field.FieldName, lblIndice);
end;

procedure TfcadProduto.ExibirLabelIndice(Campo: String; aLabel: TLabel);
begin
    aLabel.Caption := RetornaCampoTraduzido(Campo);
end;

procedure TfcadProduto.FormShow(Sender: TObject);
begin
  inherited;
  lblIndice.Caption := 'Nome';
  pegaDados;
end;

procedure TfcadProduto.pegaDados;
var
 filtro : string;
 i, totalProduto : integer;
 ganhos, quantidadeR : real;
begin
  filtro := '';
  ganhos := 0;
  quantidadeR := 0;

  //If para realizar a consulta pelo nome ou id
  if lblIndice.Caption = 'Nome' then
  begin
    if edtPesquisar.Text <> '' then
    filtro := 'where nome like ' +QuotedStr('%' +edtPesquisar.Text +'%');
  end
  else
  begin
    if edtPesquisar.Text <> '' then
    filtro := 'where p.id = ' +QuotedStr(edtPesquisar.Text);
  end;

  with adoCadProduto do
  begin
    close;
    //Traz tudo da tabela da esquerda e, se tiver algo relacionado na da direita, junta; se não tiver, ainda mostra os da esquerda.
    sql.text := 'select p.id, p.nome, p.descricao, p.valor, p.quantidade, p.idCategoria, c.descricao ' +
                'from produtos as p ' +
                '  left join categoria as c on c.id = p.idCategoria ' + filtro;
    open;
    //ajustar os campos da grid
    FieldByName('id').DisplayLabel := 'ID';
    FieldByName('id').DisplayWidth := 5;
    FieldByName('nome').DisplayLabel := 'Nome';
    FieldByName('nome').DisplayWidth := 25;
    FieldByName('descricao').DisplayLabel := 'Descrição do item';
    FieldByName('descricao').DisplayWidth := 40;
    FieldByName('valor').DisplayLabel := 'Valor do item';
    FieldByName('valor').DisplayWidth := 13;
    FieldByName('quantidade').DisplayLabel := 'Quantidade do item';
    FieldByName('quantidade').DisplayWidth := 13;
    FieldByName('idCategoria').DisplayLabel := 'Codigo da categoria';
    FieldByName('idCategoria').DisplayWidth := 13;
    FieldByName('descricao_1').DisplayLabel := 'Pertence a categoria';
    FieldByName('descricao_1').DisplayWidth := 15;

    //realizar alinhamento das colunas e dos titulos de cada coluna
    for I := 0 to dbgListagem.Columns.Count -1 do
    begin
      if (i = -1) then
      begin

      end
      else
      begin
        dbgListagem.Columns[i].Alignment := taCenter;
        dbgListagem.Columns[i].Title.Alignment := taCenter;
      end;
    end;

    // atribuir valor na lbl do total de ganhos
    while not eof do
    begin
      ganhos := ganhos + FieldByName('valor').AsFloat;
      quantidadeR := quantidadeR + FieldByName('quantidade').AsInteger;
      next;
    end;


    //adicionar status bar, para somar a quantidade total de registros, total de valor, total de quantidade
    StatusBar1.Panels[1].Text := IntToStr(adoCadProduto.RecordCount);
    StatusBar1.Panels[3].Text := 'R$ '+FormatFloat('#.##', ganhos);
    StatusBar1.Panels[5].Text := ' ' +FormatFloat('', quantidadeR);

  end;
end;

function TfcadProduto.RetornaCampoTraduzido(Campo: String): String;
var
 i : integer;
begin
  for I := 0 to adoCadProduto.Fields.Count -1 do
  begin
    if adoCadProduto.Fields[i].FieldName = campo then
    begin
      Result := adoCadProduto.Fields[i].DisplayLabel;
      break;
    end;
  end;
end;

end.
